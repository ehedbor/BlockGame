#!/usr/bin/env python3

import argparse
import os

parser = argparse.ArgumentParser(description="Embeds GLSL Shaders into a C++ source file.")
parser.add_argument("sourcedir", help="The directory containing all the shaders.")
parser.add_argument("outdir", help="The directory to generate the source file.")
args = parser.parse_args()


sourceCodeList = ["// Autogenerated source code files.\n\n", "namespace Shaders {\n"]
for root, dirs, files in os.walk(args.sourcedir):
    for shaderFileName in files:
        shaderFilePath = os.path.join(root, shaderFileName)
        shaderSource = open(shaderFilePath, "r").read()

        shaderName = shaderFileName.split(".")[0]
        sourceCodeList.append('    // ' + shaderFileName + "\n")
        sourceCodeList.append('    const char *' + shaderName + ' = R"(\n')
        sourceCodeList.append(shaderSource)
        sourceCodeList.append(')";\n    \n')

sourceCodeList.append("}\n")
sourceCode = "".join(sourceCodeList)


outputDir = args.outdir
outputFile = os.path.join(outputDir, "ShaderSources.cpp")
if not os.path.exists(outputDir):
    os.mkdir(outputDir)
open(outputFile, "w").write(sourceCode)

print("Generated shader files.")
